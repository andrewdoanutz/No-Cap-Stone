# This file is generated by gyp; do not edit.

TOOLSET := target
TARGET := nprof
### Rules for action "nprof":
quiet_cmd_binding_gyp_nprof_target_nprof = ACTION binding_gyp_nprof_target_nprof $@
cmd_binding_gyp_nprof_target_nprof = LD_LIBRARY_PATH=$(builddir)/lib.host:$(builddir)/lib.target:$$LD_LIBRARY_PATH; export LD_LIBRARY_PATH; cd $(srcdir)/.; mkdir -p $(builddir); tools/build-nprof "$(builddir)/nprof"

$(builddir)/nprof: obj := $(abs_obj)
$(builddir)/nprof: builddir := $(abs_builddir)
$(builddir)/nprof: export BUILT_FRAMEWORKS_DIR := ${abs_builddir}
$(builddir)/nprof: export BUILT_PRODUCTS_DIR := ${abs_builddir}
$(builddir)/nprof: export CONFIGURATION := ${BUILDTYPE}
$(builddir)/nprof: export DYLIB_INSTALL_NAME_BASE := @rpath
$(builddir)/nprof: export EXECUTABLE_NAME := nprof.node
$(builddir)/nprof: export EXECUTABLE_PATH := nprof.node
$(builddir)/nprof: export FULL_PRODUCT_NAME := nprof.node
$(builddir)/nprof: export LD_DYLIB_INSTALL_NAME := @rpath/nprof.node
$(builddir)/nprof: export MACH_O_TYPE := mh_bundle
$(builddir)/nprof: export PRODUCT_NAME := nprof
$(builddir)/nprof: export PRODUCT_TYPE := com.apple.product-type.library.dynamic
$(builddir)/nprof: export SDKROOT := 
$(builddir)/nprof: export SRCROOT := ${abs_srcdir}/
$(builddir)/nprof: export SOURCE_ROOT := ${SRCROOT}
$(builddir)/nprof: export TARGET_BUILD_DIR := ${abs_builddir}
$(builddir)/nprof: export TEMP_DIR := ${TMPDIR}
$(builddir)/nprof: TOOLSET := $(TOOLSET)
$(builddir)/nprof: $(srcdir)/tools/nprof-stub.js $(srcdir)/tools/v8/splaytree.js $(srcdir)/tools/v8/codemap.js $(srcdir)/tools/v8/csvparser.js $(srcdir)/tools/v8/consarray.js $(srcdir)/tools/v8/profile.js $(srcdir)/tools/v8/profile_view.js $(srcdir)/tools/v8/logreader.js $(srcdir)/tools/v8/tickprocessor.js $(srcdir)/tools/v8/tickprocessor-driver.js FORCE_DO_CMD
	$(call do_cmd,binding_gyp_nprof_target_nprof)

all_deps += $(builddir)/nprof
action_binding_gyp_nprof_target_nprof_outputs := $(builddir)/nprof


### Rules for final target.
# Build our special outputs first.
$(builddir)/nprof.node: | $(action_binding_gyp_nprof_target_nprof_outputs)

# Preserve order dependency of special output on deps.
$(action_binding_gyp_nprof_target_nprof_outputs): | 

LDFLAGS_Debug := \
	-undefined dynamic_lookup \
	-Wl,-no_pie \
	-Wl,-search_paths_first \
	-mmacosx-version-min=10.10 \
	-arch x86_64 \
	-L$(builddir) \
	-stdlib=libc++

LIBTOOLFLAGS_Debug := \
	-undefined dynamic_lookup \
	-Wl,-no_pie \
	-Wl,-search_paths_first

LDFLAGS_Release := \
	-undefined dynamic_lookup \
	-Wl,-no_pie \
	-Wl,-search_paths_first \
	-mmacosx-version-min=10.10 \
	-arch x86_64 \
	-L$(builddir) \
	-stdlib=libc++

LIBTOOLFLAGS_Release := \
	-undefined dynamic_lookup \
	-Wl,-no_pie \
	-Wl,-search_paths_first

LIBS :=

$(builddir)/nprof.node: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))
$(builddir)/nprof.node: LIBS := $(LIBS)
$(builddir)/nprof.node: GYP_LIBTOOLFLAGS := $(LIBTOOLFLAGS_$(BUILDTYPE))
$(builddir)/nprof.node: TOOLSET := $(TOOLSET)
$(builddir)/nprof.node:  FORCE_DO_CMD
	$(call do_cmd,solink_module)

all_deps += $(builddir)/nprof.node
# Add target alias
.PHONY: nprof
nprof: $(builddir)/nprof.node

# Short alias for building this executable.
.PHONY: nprof.node
nprof.node: $(builddir)/nprof.node

# Add executable to "all" target.
.PHONY: all
all: $(builddir)/nprof.node

